---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'State: S3 bucket, a cloudonaut.io template, sponsored by https://github.com/ngault'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'S3 Parameters'
      Parameters:
      - BucketName
      - Access
      - Versioning
      - NoncurrentVersionExpirationInDays
      - ExpirationInDays
      - Encryption

Parameters:
  BucketName:
    Description: 'Optional name of the bucket.'
    Type: String
    Default: ''
  Access:
    Description: 'Access policy of the bucket.'
    Type: String
    Default: Private
    AllowedValues: [Private, PublicRead, CloudFrontRead, ElbAccessLogWrite, ConfigWrite, CloudTrailWrite]
  Versioning:
    Description: 'Enable versioning to keep a backup if objects change.'
    Type: String
    Default: true
    AllowedValues: [true, false, 'false-but-was-true']
  NoncurrentVersionExpirationInDays:
    Description: 'Remove noncurrent object versions after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0
  ExpirationInDays:
    Description: 'Remove objects after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0
  Encryption:
    Description: 'Enable server side encryption using KMS (customer managed) CMK (does not work with access := [CloudFrontRead, ElbAccessLogWrite, ConfigWrite, CloudTrailWrite]).'
    Type: String
    Default: false
    AllowedValues: [true, false]
Conditions:
  HasPrivateAccess: !Equals [!Ref Access, Private]
  HasPublicReadAccess: !Equals [!Ref Access, PublicRead]
  HasCloudFrontReadAccess: !Equals [!Ref Access, CloudFrontRead]
  HasElbAccessLogWriteAccess: !Equals [!Ref Access, ElbAccessLogWrite]
  HasConfigWriteAccess: !Equals [!Ref Access, ConfigWrite]
  HasCloudTrailWriteAccess: !Equals [!Ref Access, CloudTrailWrite]
  HasBucketName: !Not [!Equals [!Ref BucketName, '']]
  HasVersioning: !Equals [!Ref Versioning, true]
  HadVersioning: !Equals [!Ref Versioning, 'false-but-was-true']
  HasNoncurrentVersionExpirationInDays: !Not [!Equals [!Ref NoncurrentVersionExpirationInDays, 0]]
  HasExpirationInDays: !Not [!Equals [!Ref ExpirationInDays, 0]]
  HasEncryption: !Equals [!Ref Encryption, true]
  HasPrivateAccessAndEncryption: !And [!Condition HasPrivateAccess, !Condition HasEncryption]
Resources:
  Key:
    Condition: HasEncryption
    Type: 'AWS::KMS::Key'
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS: '*'
          Action:
          - 'kms:Encrypt'
          - 'kms:Decrypt'
          - 'kms:ReEncrypt*'
          - 'kms:GenerateDataKey*'
          - 'kms:DescribeKey'
          Resource: '*'
          Condition:
            StringEquals:
              'kms:CallerAccount': !Ref 'AWS::AccountId'
              'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
        - !If
          - HasPublicReadAccess
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
            - 'kms:Decrypt'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
          - !Ref 'AWS::NoValue'
  KeyAlias:
    Condition: HasEncryption
    Type: 'AWS::KMS::Alias'
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}'
      TargetKeyId: !Ref Key
  Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [HasBucketName, !Ref BucketName, !Ref 'AWS::NoValue']
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          Status: Enabled
        - NoncurrentVersionExpirationInDays: !If [HasNoncurrentVersionExpirationInDays, !Ref NoncurrentVersionExpirationInDays, 1]
          Status: !If [HasNoncurrentVersionExpirationInDays, Enabled, Disabled]
        - ExpirationInDays: !If [HasExpirationInDays, !Ref ExpirationInDays, 1]
          Status: !If [HasExpirationInDays, Enabled, Disabled]
      - !Ref 'AWS::NoValue'
      VersioningConfiguration: !If [HasVersioning, {Status: Enabled}, !If [HadVersioning, {Status: Suspended}, !Ref 'AWS::NoValue']]
      BucketEncryption: !If [HasEncryption, {ServerSideEncryptionConfiguration: [{ServerSideEncryptionByDefault: {KMSMasterKeyID: !Ref Key, SSEAlgorithm: 'aws:kms'}}]}, !Ref 'AWS::NoValue']
  BucketPolicyPrivate:
    Condition: HasPrivateAccessAndEncryption
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
        - Principal: '*'
          Action: 's3:PutObject*'
          Effect: Deny
          Resource: !Sub '${Bucket.Arn}/*'
          Condition:
            StringNotEquals:
              's3:x-amz-server-side-encryption': ''
              's3:x-amz-server-side-encryption-aws-kms-key-id': !GetAtt 'Key.Arn'
  BucketPolicyPublic:
    Condition: HasPublicReadAccess
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
        - Principal: '*'
          Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub '${Bucket.Arn}/*'
  BucketPolicyCloudFrontRead:
    Condition: HasCloudFrontReadAccess
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
        - Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
          Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub '${Bucket.Arn}/*'
  BucketPolicyConfigWrite:
    Condition: HasConfigWriteAccess
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 'config.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !GetAtt 'Bucket.Arn'
        - Effect: Allow
          Principal:
            Service: 'config.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/Config/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
  BucketPolicyCloudTrailWrite:
    Condition: HasCloudTrailWriteAccess
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !GetAtt 'Bucket.Arn'
        - Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref Bucket
Outputs:
  TemplateID:
    Description: 'cloudonaut.io template id.'
    Value: 'state/s3'
  TemplateVersion:
    Description: 'cloudonaut.io template version.'
    Value: '__VERSION__'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
  BucketName:
    Description: 'Name of the bucket'
    Value: !Ref Bucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'
  BucketDomainName:
    Description: 'Domain name of the bucket.'
    Value: !GetAtt 'Bucket.DomainName'
    Export:
      Name: !Sub '${AWS::StackName}-BucketDomainName'
  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Description: 'Origin access identity for secure CloudFront access.'
    Value: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontOriginAccessIdentity'